mutate(ID = Cprnr10,
PosDate = as.Date(prdate, format("%d%b%Y"))) %>%
dplyr::select(ID, PosDate)
Covid_Positives
View(Test)
Test$firstPositiveDate
Covid_Negatives <- Test %>% filter(firstPositiveDate == "")
length(unique(Covid_Negatives$Cprnr10))
Covid_Negatives <- Test %>% filter(firstPositiveDate == "") %>%
group_by(batchid) %>%
do(sample_n(.,1)) %>%
mutate(ID = Cprnr10,
NegDate = as.Date(prdate, format("%d%b%Y"))) %>%
dplyr::select(ID, PosDate)
Covid_Negatives <- Test %>% filter(firstPositiveDate == "") %>%
group_by(batchid) %>%
do(sample_n(.,1)) %>%
mutate(ID = Cprnr10,
NegDate = as.Date(prdate, format("%d%b%Y"))) %>%
dplyr::select(ID, NegDate)
Covid_Negatives <- Test %>% filter(firstPositiveDate == "") %>%
group_by(batchid) %>%
sample_n(.,1) %>%
mutate(ID = Cprnr10,
NegDate = as.Date(prdate, format("%d%b%Y"))) %>%
dplyr::select(ID, NegDate)
Test <- Test %>% filter(batchid == max(as.numeric(unique(Test$batchid)))) %>%
#Positives
Covid_Positives <- Test %>% filter(prdate == firstPositiveDate) %>%
filter(batchid == max(as.numeric(unique(Test$batchid)))) %>%
mutate(ID = Cprnr10,
PosDate = as.Date(prdate, format("%d%b%Y"))) %>%
dplyr::select(ID, PosDate)
Test <- Test %>% filter(batchid == max(as.numeric(unique(Test$batchid))))
#Positives
Covid_Positives <- Test %>% filter(prdate == firstPositiveDate) %>%
mutate(ID = Cprnr10,
PosDate = as.Date(prdate, format("%d%b%Y"))) %>%
dplyr::select(ID, PosDate)
str(Test)
Covid_Negatives <- Test %>% filter(firstPositiveDate == "") %>%
group_by(Cprnr10) %>%
sample_n(.,1) %>%
mutate(ID = Cprnr10,
NegDate = as.Date(prdate, format("%d%b%Y"))) %>%
dplyr::select(ID, NegDate)
dt.Test <- data.table(Test)
dt.Test2 <- dt.Test[, .SD[sample(x = .N, size = 1)], by = Cprnr10]
dt.Test2
Test <- Test %>%  filter(firstPositiveDate == "")
dt.Test <- data.table(Test)
dt.Test2 <- dt.Test[, .SD[sample(x = .N, size = 1)], by = Cprnr10]
#Positives
Covid_Positives <- Test %>% filter(prdate == firstPositiveDate) %>%
mutate(ID = Cprnr10,
TestDate = as.Date(prdate, format("%d%b%Y")),
Positive = 1) %>%
dplyr::select(ID, TestDate, Positive)
Test
Test <- read.csv("F:/Grupper/CovidSafety/THGJ/CovidData_Alltests_06April2022.csv")
Test <- Test %>% filter(batchid == max(as.numeric(unique(Test$batchid))))
#Positives
Covid_Positives <- Test %>% filter(prdate == firstPositiveDate) %>%
mutate(ID = Cprnr10,
TestDate = as.Date(prdate, format("%d%b%Y")),
Positive = 1) %>%
dplyr::select(ID, TestDate, Positive)
Covid_Negatives <- Test %>% filter(firstPositiveDate == "") %>%
group_by(Cprnr10) %>%
sample_n(.,1) %>%
mutate(ID = Cprnr10,
TestDate = as.Date(prdate, format("%d%b%Y")),
Positive = 0) %>%
dplyr::select(ID, TestDate, Positive)
CovidDataset <- rbind(Covid_Positives, Covid_Negatives)
#
Covid_Negatives <- Covid_Negatives %>% ungroup() %>%   dplyr::select(ID, TestDate, Positive)
CovidDataset <- rbind(Covid_Positives, Covid_Negatives)
rm(Test)
rm(dt.Test)
rm(dt.Test2)
gc()
#Load CPR
CPRData <- read_csv("F:/Grupper/CovidSafety/EMTH/Blank/Shared/cpr_reg_20210917.csv",
NULL, col_names = TRUE)
library(excel)
source("F:/Grupper/CovidSafety/THGJ/PeterProjekt/Packages.R")
#Load CPR
CPRData <- read_csv("F:/Grupper/CovidSafety/EMTH/Blank/Shared/cpr_reg_20210917.csv",
NULL, col_names = TRUE)
CPRData <- CPRData %>%
mutate(DOB = as.Date(D_FODDATO,"%d%b%Y")) %>%
filter(!(C_STATUS %in% c("05","07","20","30","50","60"))) %>%
mutate(CensorDate = case_when(is.na(D_STATUS_HEN_START) ~ as.Date("2050-01-01"),
TRUE ~ as.Date(D_STATUS_HEN_START,"%d%b%Y")),
ID = V_PNR,
SEX = C_KON) %>%
#  filter(!((C_STATUS %in% c("70","80","90")) & CensorDate < as.Date("2014-01-01"))) %>%
dplyr::select(DOB,CensorDate,ID,SEX)
CovidDateset %>% left_join(CPRData) %>%
filter(!((C_STATUS %in% c("70","80","90")) & CensorDate < TestDate)) %>%
mutate(AgeAtTest = as.numeric(TestDate - DOB)/365.25)
CovidDataset %>% left_join(CPRData) %>%
filter(!((C_STATUS %in% c("70","80","90")) & CensorDate < TestDate)) %>%
mutate(AgeAtTest = as.numeric(TestDate - DOB)/365.25)
CPRData <- CPRData %>%
mutate(DOB = as.Date(D_FODDATO,"%d%b%Y")) %>%
filter(!(C_STATUS %in% c("05","07","20","30","50","60"))) %>%
mutate(CensorDate = case_when(is.na(D_STATUS_HEN_START) ~ as.Date("2050-01-01"),
TRUE ~ as.Date(D_STATUS_HEN_START,"%d%b%Y")),
ID = V_PNR,
SEX = C_KON) %>%
#  filter(!((C_STATUS %in% c("70","80","90")) & CensorDate < as.Date("2014-01-01"))) %>%
dplyr::select(DOB,C_STATUS,CensorDate,ID,SEX)
#Load CPR
CPRData <- read_csv("F:/Grupper/CovidSafety/EMTH/Blank/Shared/cpr_reg_20210917.csv",
NULL, col_names = TRUE)
CPRData <- CPRData %>%
mutate(DOB = as.Date(D_FODDATO,"%d%b%Y")) %>%
filter(!(C_STATUS %in% c("05","07","20","30","50","60"))) %>%
mutate(CensorDate = case_when(is.na(D_STATUS_HEN_START) ~ as.Date("2050-01-01"),
TRUE ~ as.Date(D_STATUS_HEN_START,"%d%b%Y")),
ID = V_PNR,
SEX = C_KON) %>%
#  filter(!((C_STATUS %in% c("70","80","90")) & CensorDate < as.Date("2014-01-01"))) %>%
dplyr::select(DOB,C_STATUS,CensorDate,ID,SEX)
CovidDataset %>% left_join(CPRData, by = "ID") %>%
filter(!((C_STATUS %in% c("70","80","90")) & CensorDate < TestDate)) %>%
mutate(AgeAtTest = as.numeric(TestDate - DOB)/365.25)
sum(is.na(CovidDataset$TestDate))
Test <- read.csv("F:/Grupper/CovidSafety/THGJ/CovidData_Alltests_06April2022.csv")
Test <- Test %>% filter(batchid == max(as.numeric(unique(Test$batchid))))
sum(is.na(Test$prdate))
sum(is.na(as.Date(Test$prdate, format("%d%b%Y"))))
Sys.setlocale("LC_TIME", "C")
sum(is.na(as.Date(Test$prdate, format("%d%b%Y"))))
CovidDataset2 <- CovidDataset %>% left_join(CPRData, by = "ID") %>%
filter(!((C_STATUS %in% c("70","80","90")) & CensorDate < TestDate)) %>%
mutate(AgeAtTest = as.numeric(TestDate - DOB)/365.25)
hist(CovidDataset2[CovidDataset2$Positive == 0,]$AgeAtTest)
hist(CovidDataset2[CovidDataset2$Positive == 0,]$AgeAtTest,breaks = 100)
hist(CovidDataset2[CovidDataset2$Positive == 1,]$AgeAtTest,breaks = 100)
library(matchit)
install.packages("MatchIt")
library(MatchIt)
matchit(formula = Positive~ SEX, AgeAtTest, data = CovidDataset2, method = NULL, distance = "glm")
matchit(formula = Positive~ SEX + AgeAtTest, data = CovidDataset2, method = NULL, distance = "glm")
CovidDataset2 <- CovidDataset %>% left_join(CPRData, by = "ID") %>%
filter(!((C_STATUS %in% c("70","80","90")) & CensorDate < TestDate)) %>%
mutate(AgeAtTest = as.numeric(TestDate - DOB)/365.25) %>%
filter(!is.na(AgeAtTest))
matchit(formula = Positive~ SEX + AgeAtTest, data = CovidDataset2, method = NULL, distance = "glm")
str(CovidDataset2)
CovidDataset2 <- CovidDataset %>% left_join(CPRData, by = "ID") %>%
filter(!((C_STATUS %in% c("70","80","90")) & CensorDate < TestDate)) %>%
mutate(AgeAtTest = as.numeric(TestDate - DOB)/365.25) %>%
filter(!is.na(AgeAtTest)) %>%
mutate(SEX = factor(SEX, levels = c("M","K"), labels = c("M","F")))
matchit(formula = Positive~ SEX + AgeAtTest, data = CovidDataset2, method = NULL, distance = "glm")
CovidDataset2 <- CovidDataset %>% left_join(CPRData, by = "ID") %>%
filter(!((C_STATUS %in% c("70","80","90")) & CensorDate < TestDate)) %>%
mutate(AgeAtTest = as.numeric(TestDate - DOB)/365.25) %>%
filter(!is.na(AgeAtTest)) %>%
mutate(SEX = factor(SEX, levels = c("M","K"), labels = c("M","F")),
Positive = as.factor(Positive))
matchit(formula = Positive~ SEX + AgeAtTest, data = CovidDataset2, method = NULL, distance = "glm")
str(CovidDataset2)
CovidDataset2$SEX
sum(is.na(CovidDataset2$SEX))
table(CovidDataset2$SEX)
table(CovidDataset2$Positive)
table(CovidDataset2$AgeAtTest)
sum(is.na(CovidDataset2$AgeAtTest))
CovidDataset2 <- CovidDataset %>% left_join(CPRData, by = "ID") %>%
filter(!((C_STATUS %in% c("70","80","90")) & CensorDate < TestDate)) %>%
mutate(AgeAtTest = as.numeric(TestDate - DOB)/365.25) %>%
filter(!is.na(AgeAtTest)) %>%
mutate(SEX = factor(SEX, levels = c("M","K"), labels = c("M","F")),
Positive = as.integer(Positive))
matchit(formula = Positive~ SEX + AgeAtTest, data = CovidDataset2, method = NULL, distance = "glm")
str(CovidDataset2)
matchit(formula = Positive~ SEX + AgeAtTest, data = CovidDataset2, method = "nearest", distance = "glm")
a <- c("Test", "Text")
b <- c("1", "2")
paste0(a,b)
b <- c(1,2)
paste0(a,b)
setwd("F:/Grupper/CovidSafety/THGJ/PeterProjekt/Population/TestPositive")
#Load Packages and Macros
source("F:/Grupper/CovidSafety/THGJ/Peterprojekt/Packages.R")
source("F:/Grupper/CovidSafety/THGJ/Peterprojekt/Macros.R")
source("F:/Grupper/CovidSafety/THGJ/PeterProjekt/ExpectedFun.R")
source("F:/Grupper/CovidSafety/THGJ/PeterProjekt/ObservedFun.R")
source("F:/Grupper/CovidSafety/THGJ/PeterProjekt/ExposedData.R")
source("SetupSettings.R")
#Load background rates
BG_Rates <- list.load("F:/Grupper/CovidSafety/THGJ/Peterprojekt/Population/TestPositive/BGRates.rds")
BG_Rates$`Venous thrombosis`
#Read Events.rds
Events <- list.load("F:/Grupper/CovidSafety/THGJ/PeterProjekt/Population/TestPositive/Data/Events.rds")
Events
Data <- read.csv("F:/Grupper/CovidSafety/THGJ/Peterprojekt/Population/TestPositive/Data/TestPositive.csv")
#Change column format
cols.factor <- c("Casedefinition", "SEX", "VirusVariant")
cols.chr <- c("ID")
cols.date <- c("SampleDate","DOB", "CensorDate", "VaccineDate")
Data <- Data %>%
mutate_at(vars(cols.factor), list(~ factor(as.factor(.)))) %>%
mutate_at(vars(cols.chr), list(~ as.character(.))) %>%
mutate_at(vars(cols.date), as.Date, format = "%Y-%m-%d")
A <- data.frame("A" = 1)
B <- data.frame("B" = 2)
A %>% left_join(B)
A %>% full_join(B)
A %>% full_join(B, by = NULL)
A %>% full_join(B, by = "NULL")
A
B
full_join(A,B, keep = TRUE"B")
full_join(A,B, keep = TRUE)
full_join(A,B, copy = TRUE)
crossing(A,B)
SIR.fun <- function(BGR,Exposed.DF,Obs.DF){
#Take the data.frame that include the total observed PYRS of the exposed variable (COVID19 infection)
#and combine it with the historical rates.
Exp.DF <- Exposed.DF  %>%
left_join(BGR, by = c("AGE","SEX")) %>%
group_by_at(.,vars(grp_vars)) %>%
mutate(Expected = Rate*PYRS/100000) %>%
dplyr::summarise(Exp = sum(Expected, na.rm = TRUE),
Exp_low = qchisq(0.025,2*sum(Expected, na.rm = TRUE))/2,
Exp_upr = qchisq(0.975,2*(sum(Expected, na.rm = TRUE)+1))/2,.groups = "keep")
#The expected number of cases is combined with the Observed number of cases to
#produce the final Standardized Incidence Rate Ratios.
if(is.null(grp_vars)){
SIR.DF <- crossing(Exp.DF, Obs.DF)
} else{
SIR.DF <- Exp.DF %>% left_join(Obs.DF, by = c(grp_vars)) %>%
mutate(SIR = Obs/Exp, SIR_upr = Obs/Exp_low, SIR_low = Obs/Exp_upr) %>%
dplyr::select_at(c(grp_vars,"SIR","SIR_low","SIR_upr"))
}
return(SIR.DF)
}
SIR.fun <- function(BGR,Exposed.DF,Obs.DF, grp.vars = NULL){
#Take the data.frame that include the total observed PYRS of the exposed variable (COVID19 infection)
#and combine it with the historical rates.
Exp.DF <- Exposed.DF  %>%
left_join(BGR, by = c("AGE","SEX")) %>%
group_by_at(.,vars(grp_vars)) %>%
mutate(Expected = Rate*PYRS/100000) %>%
dplyr::summarise(Exp = sum(Expected, na.rm = TRUE),
Exp_low = qchisq(0.025,2*sum(Expected, na.rm = TRUE))/2,
Exp_upr = qchisq(0.975,2*(sum(Expected, na.rm = TRUE)+1))/2,.groups = "keep")
#The expected number of cases is combined with the Observed number of cases to
#produce the final Standardized Incidence Rate Ratios.
if(is.null(grp_vars)){
SIR.DF <- crossing(Exp.DF, Obs.DF)
} else{
SIR.DF <- Exp.DF %>% left_join(Obs.DF, by = c(grp_vars)) %>%
mutate(SIR = Obs/Exp, SIR_upr = Obs/Exp_low, SIR_low = Obs/Exp_upr) %>%
dplyr::select_at(c(grp_vars,"SIR","SIR_low","SIR_upr"))
}
return(SIR.DF)
}
BGR <- BG_Rates$`Venous thrombosis`
BGR
BGR <- BGR %>% group_by(AGE, SEX) %>%
summarise(count = sum(count), PYRS = sum(PYRS)) %>%
mutate(Rate = count/PYRS*100000)
BGR
rate_sim <- rpois(1,BGR$count)/BGR$PYRS
rate_sim
rpois(1,BGR$count)
rpois(2,BGR$count)
rpois(10,BGR$count)
rpois(length(BGR$count),BGR$count)
rpois(length(BGR$count),BGR$count)/BGR$PYRS
rate_sim <- rpois(length(BGR$count),BGR$count)/BGR$PYRS
rate_sim
plot(rate_sim)
points(BGR$Rate, col = "red")
points(c(1:34),BGR$Rate, col = "red")
rate_sim <- rpois(length(BGR$count),BGR$count)/BGR$PYRS*100000
plot(rate_sim)
points(c(1:34),BGR$Rate, col = "red")
runif(34)
n <- nrow(BGR)
rate_sim <- rpois(n,BGR$count*uniform(n))/BGR$PYRS*100000
rate_sim <- rpois(n,BGR$count*runif(n))/BGR$PYRS*100000
plot(rate_sim)
points(c(1:34),BGR$Rate, col = "red")
rate_sim <- rpois(n,BGR$count*runif(n))/BGR$PYRS*100000
plot(rate_sim)
points(c(1:34),BGR$Rate, col = "red")
rate_sim
rate_sim <- rpois(n,BGR$count*runif(n,0.9,1))/BGR$PYRS*100000
plot(rate_sim)
points(c(1:34),BGR$Rate, col = "red")
rate_sim <- rpois(n,BGR$count*runif(n,0.7,1))/BGR$PYRS*100000
plot(rate_sim)
points(c(1:34),BGR$Rate, col = "red")
rate_sim <- rpois(n,BGR$count*rnorm(n,1,0.1))/BGR$PYRS*100000
plot(rate_sim)
points(c(1:34),BGR$Rate, col = "red")
rate_sim <- rpois(n,BGR$count*rnorm(n,1,0.3))/BGR$PYRS*100000
plot(rate_sim)
points(c(1:34),BGR$Rate, col = "red")
rate_sim
A <- unique(BGR$AGE)
A
B <- unique(BGR$SEX)
crossing(A,B)
Exposed.DF$PYRS <- 25000
AGE <- unique(BGR$AGE)
SEX <- unique(BGR$SEX)
Exposed.DF <- crossing(AGE,SEX)
Exposed.DF$PYRS <- 25000
Obs.DF <- crossing(AGE,SEX) %>% mutate(PYRS = 25000, effect = case_when(SEX == "M" ~ 1.5,
SEX == "F" ~ 1.1),
Obs = rpois(n, rate_sim*effect*PYRS/100000))
Obs.DF
SIR.fun <- function(BGR,Obs.DF, grp.vars = NULL){
#Take the data.frame that include the total observed PYRS of the exposed variable (COVID19 infection)
#and combine it with the historical rates.
SIR.DF <- Obs.DF  %>%
left_join(BGR, by = c("AGE","SEX")) %>%
group_by_at(.,vars(grp_vars)) %>%
mutate(Expected = Rate*PYRS/100000) %>%
dplyr::summarise(Exp = sum(Expected, na.rm = TRUE),
Exp_low = qchisq(0.025,2*sum(Expected, na.rm = TRUE))/2,
Exp_upr = qchisq(0.975,2*(sum(Expected, na.rm = TRUE)+1))/2,.groups = "keep") %>%
mutate(SIR = Obs/Exp, SIR_upr = Obs/Exp_low, SIR_low = Obs/Exp_upr) %>%
dplyr::select_at(c(grp_vars,"SIR","SIR_low","SIR_upr"))
#The expected number of cases is combined with the Observed number of cases to
#produce the final Standardized Incidence Rate Ratios.
# if(is.null(grp_vars)){
#   SIR.DF <- crossing(Exp.DF, Obs.DF)
# } else{
#   SIR.DF <- Exp.DF %>% left_join(Obs.DF, by = c(grp_vars)) %>%
#     mutate(SIR = Obs/Exp, SIR_upr = Obs/Exp_low, SIR_low = Obs/Exp_upr) %>%
#     dplyr::select_at(c(grp_vars,"SIR","SIR_low","SIR_upr"))
# }
return(SIR.DF)
}
BGR_sim <- crossing(AGE,SEX) %>% mutate(Rate = rpois(n,BGR$count*rnorm(n,1,0.3))/BGR$PYRS*100000)
BGR_sim
Exposed.DF <- crossing(AGE,SEX)
Exposed.DF$PYRS <- 25000
Obs.DF <- crossing(AGE,SEX) %>% mutate(PYRS = 25000, effect = case_when(SEX == "M" ~ 1.5,
SEX == "F" ~ 1.1),
Obs = rpois(n, BGR_sim$Rate*effect*PYRS/100000))
Obs.DF
SIR.fun(BGR_sim, Obs.DF)
SIR.fun <- function(BGR,Obs.DF, grp_vars = NULL){
#Take the data.frame that include the total observed PYRS of the exposed variable (COVID19 infection)
#and combine it with the historical rates.
SIR.DF <- Obs.DF  %>%
left_join(BGR, by = c("AGE","SEX")) %>%
group_by_at(.,vars(grp_vars)) %>%
mutate(Expected = Rate*PYRS/100000) %>%
dplyr::summarise(Exp = sum(Expected, na.rm = TRUE),
Exp_low = qchisq(0.025,2*sum(Expected, na.rm = TRUE))/2,
Exp_upr = qchisq(0.975,2*(sum(Expected, na.rm = TRUE)+1))/2,.groups = "keep") %>%
mutate(SIR = Obs/Exp, SIR_upr = Obs/Exp_low, SIR_low = Obs/Exp_upr) %>%
dplyr::select_at(c(grp_vars,"SIR","SIR_low","SIR_upr"))
#The expected number of cases is combined with the Observed number of cases to
#produce the final Standardized Incidence Rate Ratios.
# if(is.null(grp_vars)){
#   SIR.DF <- crossing(Exp.DF, Obs.DF)
# } else{
#   SIR.DF <- Exp.DF %>% left_join(Obs.DF, by = c(grp_vars)) %>%
#     mutate(SIR = Obs/Exp, SIR_upr = Obs/Exp_low, SIR_low = Obs/Exp_upr) %>%
#     dplyr::select_at(c(grp_vars,"SIR","SIR_low","SIR_upr"))
# }
return(SIR.DF)
}
SIR.fun(BGR_sim, Obs.DF)
Obs.DF
SIR.DF <- Obs.DF  %>%
left_join(BGR_sim, by = c("AGE","SEX")) %>%
group_by_at(.,vars(grp_vars)) %>%
mutate(Expected = Rate*PYRS/100000) %>%
dplyr::summarise(Exp = sum(Expected, na.rm = TRUE),
Exp_low = qchisq(0.025,2*sum(Expected, na.rm = TRUE))/2,
Exp_upr = qchisq(0.975,2*(sum(Expected, na.rm = TRUE)+1))/2,.groups = "keep") %>%
mutate(SIR = Obs/Exp, SIR_upr = Obs/Exp_low, SIR_low = Obs/Exp_upr) %>%
dplyr::select_at(c(grp_vars,"SIR","SIR_low","SIR_upr"))
grp_vars <- NULL
SIR.DF <- Obs.DF  %>%
left_join(BGR_sim, by = c("AGE","SEX")) %>%
group_by_at(.,vars(grp_vars)) %>%
mutate(Expected = Rate*PYRS/100000) %>%
dplyr::summarise(Exp = sum(Expected, na.rm = TRUE),
Exp_low = qchisq(0.025,2*sum(Expected, na.rm = TRUE))/2,
Exp_upr = qchisq(0.975,2*(sum(Expected, na.rm = TRUE)+1))/2,.groups = "keep") %>%
mutate(SIR = Obs/Exp, SIR_upr = Obs/Exp_low, SIR_low = Obs/Exp_upr) %>%
dplyr::select_at(c(grp_vars,"SIR","SIR_low","SIR_upr"))
SIR.DF <- Obs.DF  %>%
left_join(BGR_sim, by = c("AGE","SEX")) %>%
group_by_at(.,vars(grp_vars)) %>%
mutate(Expected = Rate*PYRS/100000)
SIR_DF
SIR.DF
SIR.fun <- function(BGR,Obs.DF, grp_vars = NULL){
#Take the data.frame that include the total observed PYRS of the exposed variable (COVID19 infection)
#and combine it with the historical rates.
SIR.DF <- Obs.DF  %>%
left_join(BGR, by = c("AGE","SEX")) %>%
group_by_at(.,vars(grp_vars)) %>%
mutate(Expected = Rate*PYRS/100000) %>%
dplyr::summarise(SIR = sum(Expected, na.rm = TRUE),
SIR_low = qchisq(0.025,2*sum(Expected, na.rm = TRUE))/2,
SIR_upr = qchisq(0.975,2*(sum(Expected, na.rm = TRUE)+1))/2,.groups = "keep")
#%>%
#mutate(SIR = Obs/Exp, SIR_upr = Obs/Exp_low, SIR_low = Obs/Exp_upr) %>%
#  dplyr::select_at(c(grp_vars,"SIR","SIR_low","SIR_upr"))
#The expected number of cases is combined with the Observed number of cases to
#produce the final Standardized Incidence Rate Ratios.
# if(is.null(grp_vars)){
#   SIR.DF <- crossing(Exp.DF, Obs.DF)
# } else{
#   SIR.DF <- Exp.DF %>% left_join(Obs.DF, by = c(grp_vars)) %>%
#     mutate(SIR = Obs/Exp, SIR_upr = Obs/Exp_low, SIR_low = Obs/Exp_upr) %>%
#     dplyr::select_at(c(grp_vars,"SIR","SIR_low","SIR_upr"))
# }
return(SIR.DF)
}
SIR.fun(BGR_sim, Obs.DF)
#Take the data.frame that include the total observed PYRS of the exposed variable (COVID19 infection)
#and combine it with the historical rates.
SIR.DF <- Obs.DF  %>%
left_join(BGR, by = c("AGE","SEX")) %>%
group_by_at(.,vars(grp_vars)) %>%
mutate(Expected = Rate*PYRS/100000) %>%
dplyr::summarise(SIR = sum(Obs)/sum(Expected, na.rm = TRUE),
SIR_low = sum(Obs)/qchisq(0.025,2*sum(Expected, na.rm = TRUE))/2,
SIR_upr = sum(Obs)/qchisq(0.975,2*(sum(Expected, na.rm = TRUE)+1))/2,.groups = "keep")
SIR.fun <- function(BGR,Obs.DF, grp_vars = NULL){
#Take the data.frame that include the total observed PYRS of the exposed variable (COVID19 infection)
#and combine it with the historical rates.
SIR.DF <- Obs.DF  %>%
left_join(BGR, by = c("AGE","SEX")) %>%
group_by_at(.,vars(grp_vars)) %>%
mutate(Expected = Rate*PYRS/100000) %>%
dplyr::summarise(SIR = sum(Obs)/sum(Expected, na.rm = TRUE),
SIR_low = sum(Obs)/qchisq(0.025,2*sum(Expected, na.rm = TRUE))/2,
SIR_upr = sum(Obs)/qchisq(0.975,2*(sum(Expected, na.rm = TRUE)+1))/2,.groups = "keep")
#%>%
#mutate(SIR = Obs/Exp, SIR_upr = Obs/Exp_low, SIR_low = Obs/Exp_upr) %>%
#  dplyr::select_at(c(grp_vars,"SIR","SIR_low","SIR_upr"))
#The expected number of cases is combined with the Observed number of cases to
#produce the final Standardized Incidence Rate Ratios.
# if(is.null(grp_vars)){
#   SIR.DF <- crossing(Exp.DF, Obs.DF)
# } else{
#   SIR.DF <- Exp.DF %>% left_join(Obs.DF, by = c(grp_vars)) %>%
#     mutate(SIR = Obs/Exp, SIR_upr = Obs/Exp_low, SIR_low = Obs/Exp_upr) %>%
#     dplyr::select_at(c(grp_vars,"SIR","SIR_low","SIR_upr"))
# }
return(SIR.DF)
}
SIR.fun(BGR_sim, Obs.DF)
SIR.fun(BGR_sim, Obs.DF, grp_vars = c("SEX"))
SIR.fun <- function(BGR,Obs.DF, grp_vars = NULL){
#Take the data.frame that include the total observed PYRS of the exposed variable (COVID19 infection)
#and combine it with the historical rates.
SIR.DF <- Obs.DF  %>%
left_join(BGR, by = c("AGE","SEX")) %>%
group_by_at(.,vars(grp_vars)) %>%
mutate(Expected = Rate*PYRS/100000) %>%
dplyr::summarise(SIR = sum(Obs)/sum(Expected, na.rm = TRUE),
SIR_upr = sum(Obs)/(qchisq(0.025,2*sum(Expected, na.rm = TRUE))/2),
SIR_low = sum(Obs)/(qchisq(0.975,2*(sum(Expected, na.rm = TRUE)+1))/2),.groups = "keep")
#%>%
#mutate(SIR = Obs/Exp, SIR_upr = Obs/Exp_low, SIR_low = Obs/Exp_upr) %>%
#  dplyr::select_at(c(grp_vars,"SIR","SIR_low","SIR_upr"))
#The expected number of cases is combined with the Observed number of cases to
#produce the final Standardized Incidence Rate Ratios.
# if(is.null(grp_vars)){
#   SIR.DF <- crossing(Exp.DF, Obs.DF)
# } else{
#   SIR.DF <- Exp.DF %>% left_join(Obs.DF, by = c(grp_vars)) %>%
#     mutate(SIR = Obs/Exp, SIR_upr = Obs/Exp_low, SIR_low = Obs/Exp_upr) %>%
#     dplyr::select_at(c(grp_vars,"SIR","SIR_low","SIR_upr"))
# }
return(SIR.DF)
}
SIR.fun(BGR_sim, Obs.DF, grp_vars = c("SEX"))
SIR.fun(BGR_sim, Obs.DF, grp_vars = c("AGE"))
BGR_sim
Obs.DF
View(Obs.DF)
View(BGR_sim)
SIR.fun(BGR_sim, Obs.DF, grp_vars = NULL)
SIR.fun(BGR_sim, Obs.DF, grp_vars = c("SEX"))
SIR.fun(BGR_sim, Obs.DF, grp_vars = NULL)
SIR.fun(BGR_sim, Obs.DF, grp_vars = c("SEX"))
SIR.fun(BGR_sim, Obs.DF, grp_vars = c("AGE"))
SIR.fun(BGR_sim, Obs.DF, grp_vars = NULL)
SIR.fun(BGR_sim, Obs.DF, grp_vars = c("SEX"))
SIR.fun(BGR_sim, Obs.DF, grp_vars = c("AGE"))
save.csv(BGR_sim, "F:/Grupper/CovidSafety/THGJ/PeterProjekt/Sim/Data/Background_rates.csv")
write.csv(BGR_sim, "F:/Grupper/CovidSafety/THGJ/PeterProjekt/Sim/Data/Background_rates.csv")
write.csv(Obs.DF, "F:/Grupper/CovidSafety/THGJ/PeterProjekt/Sim/Data/ObservationalData.csv")
#Load simulation data
setwd(getSrcDirectory()[1])
#Load simulation data
setwd(getSrcDirectory()[1])
#Load simulation data
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
BGR <- read.csv("Data/Background_rates.csv")
Obs.DF <- read.csv("Data/ObservationalData.csv")
